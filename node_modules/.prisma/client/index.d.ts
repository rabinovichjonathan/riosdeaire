
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Fecha
 * 
 */
export type Fecha = {
  id: number
  nombre: string
  lugar: string
  numero: number | null
  localidad: string | null
  codigoPostal: string | null
  pais: string | null
  fecha: string
  imagen: string | null
  hora: string | null
  entrada: string | null
}

/**
 * Model Mensaje
 * 
 */
export type Mensaje = {
  id: number
  mensaje: string
  nombre: string
  mail: string
}

/**
 * Model Cancion
 * 
 */
export type Cancion = {
  id: number
  nombre: string
  imagen: string
  descripcion: string
  anio: number | null
  album: string | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Fechas
 * const fechas = await prisma.fecha.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Fechas
   * const fechas = await prisma.fecha.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: {maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel}): Promise<R>;

      /**
   * `prisma.fecha`: Exposes CRUD operations for the **Fecha** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fechas
    * const fechas = await prisma.fecha.findMany()
    * ```
    */
  get fecha(): Prisma.FechaDelegate<GlobalReject>;

  /**
   * `prisma.mensaje`: Exposes CRUD operations for the **Mensaje** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Mensajes
    * const mensajes = await prisma.mensaje.findMany()
    * ```
    */
  get mensaje(): Prisma.MensajeDelegate<GlobalReject>;

  /**
   * `prisma.cancion`: Exposes CRUD operations for the **Cancion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cancions
    * const cancions = await prisma.cancion.findMany()
    * ```
    */
  get cancion(): Prisma.CancionDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.8.1
   * Query Engine version: d6e67a83f971b175a593ccc12e15c4a757f93ffe
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Fecha: 'Fecha',
    Mensaje: 'Mensaje',
    Cancion: 'Cancion'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Fecha
   */


  export type AggregateFecha = {
    _count: FechaCountAggregateOutputType | null
    _avg: FechaAvgAggregateOutputType | null
    _sum: FechaSumAggregateOutputType | null
    _min: FechaMinAggregateOutputType | null
    _max: FechaMaxAggregateOutputType | null
  }

  export type FechaAvgAggregateOutputType = {
    id: number | null
    numero: number | null
  }

  export type FechaSumAggregateOutputType = {
    id: number | null
    numero: number | null
  }

  export type FechaMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    lugar: string | null
    numero: number | null
    localidad: string | null
    codigoPostal: string | null
    pais: string | null
    fecha: string | null
    imagen: string | null
    hora: string | null
    entrada: string | null
  }

  export type FechaMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    lugar: string | null
    numero: number | null
    localidad: string | null
    codigoPostal: string | null
    pais: string | null
    fecha: string | null
    imagen: string | null
    hora: string | null
    entrada: string | null
  }

  export type FechaCountAggregateOutputType = {
    id: number
    nombre: number
    lugar: number
    numero: number
    localidad: number
    codigoPostal: number
    pais: number
    fecha: number
    imagen: number
    hora: number
    entrada: number
    _all: number
  }


  export type FechaAvgAggregateInputType = {
    id?: true
    numero?: true
  }

  export type FechaSumAggregateInputType = {
    id?: true
    numero?: true
  }

  export type FechaMinAggregateInputType = {
    id?: true
    nombre?: true
    lugar?: true
    numero?: true
    localidad?: true
    codigoPostal?: true
    pais?: true
    fecha?: true
    imagen?: true
    hora?: true
    entrada?: true
  }

  export type FechaMaxAggregateInputType = {
    id?: true
    nombre?: true
    lugar?: true
    numero?: true
    localidad?: true
    codigoPostal?: true
    pais?: true
    fecha?: true
    imagen?: true
    hora?: true
    entrada?: true
  }

  export type FechaCountAggregateInputType = {
    id?: true
    nombre?: true
    lugar?: true
    numero?: true
    localidad?: true
    codigoPostal?: true
    pais?: true
    fecha?: true
    imagen?: true
    hora?: true
    entrada?: true
    _all?: true
  }

  export type FechaAggregateArgs = {
    /**
     * Filter which Fecha to aggregate.
     * 
    **/
    where?: FechaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fechas to fetch.
     * 
    **/
    orderBy?: Enumerable<FechaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: FechaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fechas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fechas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Fechas
    **/
    _count?: true | FechaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FechaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FechaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FechaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FechaMaxAggregateInputType
  }

  export type GetFechaAggregateType<T extends FechaAggregateArgs> = {
        [P in keyof T & keyof AggregateFecha]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFecha[P]>
      : GetScalarType<T[P], AggregateFecha[P]>
  }




  export type FechaGroupByArgs = {
    where?: FechaWhereInput
    orderBy?: Enumerable<FechaOrderByWithAggregationInput>
    by: Array<FechaScalarFieldEnum>
    having?: FechaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FechaCountAggregateInputType | true
    _avg?: FechaAvgAggregateInputType
    _sum?: FechaSumAggregateInputType
    _min?: FechaMinAggregateInputType
    _max?: FechaMaxAggregateInputType
  }


  export type FechaGroupByOutputType = {
    id: number
    nombre: string
    lugar: string
    numero: number | null
    localidad: string | null
    codigoPostal: string | null
    pais: string | null
    fecha: string
    imagen: string | null
    hora: string | null
    entrada: string | null
    _count: FechaCountAggregateOutputType | null
    _avg: FechaAvgAggregateOutputType | null
    _sum: FechaSumAggregateOutputType | null
    _min: FechaMinAggregateOutputType | null
    _max: FechaMaxAggregateOutputType | null
  }

  type GetFechaGroupByPayload<T extends FechaGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FechaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FechaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FechaGroupByOutputType[P]>
            : GetScalarType<T[P], FechaGroupByOutputType[P]>
        }
      >
    >


  export type FechaSelect = {
    id?: boolean
    nombre?: boolean
    lugar?: boolean
    numero?: boolean
    localidad?: boolean
    codigoPostal?: boolean
    pais?: boolean
    fecha?: boolean
    imagen?: boolean
    hora?: boolean
    entrada?: boolean
  }


  export type FechaGetPayload<S extends boolean | null | undefined | FechaArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Fecha :
    S extends undefined ? never :
    S extends { include: any } & (FechaArgs | FechaFindManyArgs)
    ? Fecha 
    : S extends { select: any } & (FechaArgs | FechaFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Fecha ? Fecha[P] : never
  } 
      : Fecha


  type FechaCountArgs = Merge<
    Omit<FechaFindManyArgs, 'select' | 'include'> & {
      select?: FechaCountAggregateInputType | true
    }
  >

  export interface FechaDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Fecha that matches the filter.
     * @param {FechaFindUniqueArgs} args - Arguments to find a Fecha
     * @example
     * // Get one Fecha
     * const fecha = await prisma.fecha.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FechaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FechaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Fecha'> extends True ? Prisma__FechaClient<FechaGetPayload<T>> : Prisma__FechaClient<FechaGetPayload<T> | null, null>

    /**
     * Find one Fecha that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FechaFindUniqueOrThrowArgs} args - Arguments to find a Fecha
     * @example
     * // Get one Fecha
     * const fecha = await prisma.fecha.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FechaFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FechaFindUniqueOrThrowArgs>
    ): Prisma__FechaClient<FechaGetPayload<T>>

    /**
     * Find the first Fecha that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FechaFindFirstArgs} args - Arguments to find a Fecha
     * @example
     * // Get one Fecha
     * const fecha = await prisma.fecha.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FechaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FechaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Fecha'> extends True ? Prisma__FechaClient<FechaGetPayload<T>> : Prisma__FechaClient<FechaGetPayload<T> | null, null>

    /**
     * Find the first Fecha that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FechaFindFirstOrThrowArgs} args - Arguments to find a Fecha
     * @example
     * // Get one Fecha
     * const fecha = await prisma.fecha.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FechaFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FechaFindFirstOrThrowArgs>
    ): Prisma__FechaClient<FechaGetPayload<T>>

    /**
     * Find zero or more Fechas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FechaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fechas
     * const fechas = await prisma.fecha.findMany()
     * 
     * // Get first 10 Fechas
     * const fechas = await prisma.fecha.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fechaWithIdOnly = await prisma.fecha.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FechaFindManyArgs>(
      args?: SelectSubset<T, FechaFindManyArgs>
    ): PrismaPromise<Array<FechaGetPayload<T>>>

    /**
     * Create a Fecha.
     * @param {FechaCreateArgs} args - Arguments to create a Fecha.
     * @example
     * // Create one Fecha
     * const Fecha = await prisma.fecha.create({
     *   data: {
     *     // ... data to create a Fecha
     *   }
     * })
     * 
    **/
    create<T extends FechaCreateArgs>(
      args: SelectSubset<T, FechaCreateArgs>
    ): Prisma__FechaClient<FechaGetPayload<T>>

    /**
     * Create many Fechas.
     *     @param {FechaCreateManyArgs} args - Arguments to create many Fechas.
     *     @example
     *     // Create many Fechas
     *     const fecha = await prisma.fecha.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FechaCreateManyArgs>(
      args?: SelectSubset<T, FechaCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Fecha.
     * @param {FechaDeleteArgs} args - Arguments to delete one Fecha.
     * @example
     * // Delete one Fecha
     * const Fecha = await prisma.fecha.delete({
     *   where: {
     *     // ... filter to delete one Fecha
     *   }
     * })
     * 
    **/
    delete<T extends FechaDeleteArgs>(
      args: SelectSubset<T, FechaDeleteArgs>
    ): Prisma__FechaClient<FechaGetPayload<T>>

    /**
     * Update one Fecha.
     * @param {FechaUpdateArgs} args - Arguments to update one Fecha.
     * @example
     * // Update one Fecha
     * const fecha = await prisma.fecha.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FechaUpdateArgs>(
      args: SelectSubset<T, FechaUpdateArgs>
    ): Prisma__FechaClient<FechaGetPayload<T>>

    /**
     * Delete zero or more Fechas.
     * @param {FechaDeleteManyArgs} args - Arguments to filter Fechas to delete.
     * @example
     * // Delete a few Fechas
     * const { count } = await prisma.fecha.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FechaDeleteManyArgs>(
      args?: SelectSubset<T, FechaDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fechas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FechaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fechas
     * const fecha = await prisma.fecha.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FechaUpdateManyArgs>(
      args: SelectSubset<T, FechaUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Fecha.
     * @param {FechaUpsertArgs} args - Arguments to update or create a Fecha.
     * @example
     * // Update or create a Fecha
     * const fecha = await prisma.fecha.upsert({
     *   create: {
     *     // ... data to create a Fecha
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fecha we want to update
     *   }
     * })
    **/
    upsert<T extends FechaUpsertArgs>(
      args: SelectSubset<T, FechaUpsertArgs>
    ): Prisma__FechaClient<FechaGetPayload<T>>

    /**
     * Count the number of Fechas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FechaCountArgs} args - Arguments to filter Fechas to count.
     * @example
     * // Count the number of Fechas
     * const count = await prisma.fecha.count({
     *   where: {
     *     // ... the filter for the Fechas we want to count
     *   }
     * })
    **/
    count<T extends FechaCountArgs>(
      args?: Subset<T, FechaCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FechaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fecha.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FechaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FechaAggregateArgs>(args: Subset<T, FechaAggregateArgs>): PrismaPromise<GetFechaAggregateType<T>>

    /**
     * Group by Fecha.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FechaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FechaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FechaGroupByArgs['orderBy'] }
        : { orderBy?: FechaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FechaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFechaGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Fecha.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FechaClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Fecha base type for findUnique actions
   */
  export type FechaFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Fecha
     * 
    **/
    select?: FechaSelect | null
    /**
     * Filter, which Fecha to fetch.
     * 
    **/
    where: FechaWhereUniqueInput
  }

  /**
   * Fecha findUnique
   */
  export interface FechaFindUniqueArgs extends FechaFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Fecha findUniqueOrThrow
   */
  export type FechaFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Fecha
     * 
    **/
    select?: FechaSelect | null
    /**
     * Filter, which Fecha to fetch.
     * 
    **/
    where: FechaWhereUniqueInput
  }


  /**
   * Fecha base type for findFirst actions
   */
  export type FechaFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Fecha
     * 
    **/
    select?: FechaSelect | null
    /**
     * Filter, which Fecha to fetch.
     * 
    **/
    where?: FechaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fechas to fetch.
     * 
    **/
    orderBy?: Enumerable<FechaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fechas.
     * 
    **/
    cursor?: FechaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fechas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fechas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fechas.
     * 
    **/
    distinct?: Enumerable<FechaScalarFieldEnum>
  }

  /**
   * Fecha findFirst
   */
  export interface FechaFindFirstArgs extends FechaFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Fecha findFirstOrThrow
   */
  export type FechaFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Fecha
     * 
    **/
    select?: FechaSelect | null
    /**
     * Filter, which Fecha to fetch.
     * 
    **/
    where?: FechaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fechas to fetch.
     * 
    **/
    orderBy?: Enumerable<FechaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fechas.
     * 
    **/
    cursor?: FechaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fechas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fechas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fechas.
     * 
    **/
    distinct?: Enumerable<FechaScalarFieldEnum>
  }


  /**
   * Fecha findMany
   */
  export type FechaFindManyArgs = {
    /**
     * Select specific fields to fetch from the Fecha
     * 
    **/
    select?: FechaSelect | null
    /**
     * Filter, which Fechas to fetch.
     * 
    **/
    where?: FechaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fechas to fetch.
     * 
    **/
    orderBy?: Enumerable<FechaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Fechas.
     * 
    **/
    cursor?: FechaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fechas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fechas.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FechaScalarFieldEnum>
  }


  /**
   * Fecha create
   */
  export type FechaCreateArgs = {
    /**
     * Select specific fields to fetch from the Fecha
     * 
    **/
    select?: FechaSelect | null
    /**
     * The data needed to create a Fecha.
     * 
    **/
    data: XOR<FechaCreateInput, FechaUncheckedCreateInput>
  }


  /**
   * Fecha createMany
   */
  export type FechaCreateManyArgs = {
    /**
     * The data used to create many Fechas.
     * 
    **/
    data: Enumerable<FechaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Fecha update
   */
  export type FechaUpdateArgs = {
    /**
     * Select specific fields to fetch from the Fecha
     * 
    **/
    select?: FechaSelect | null
    /**
     * The data needed to update a Fecha.
     * 
    **/
    data: XOR<FechaUpdateInput, FechaUncheckedUpdateInput>
    /**
     * Choose, which Fecha to update.
     * 
    **/
    where: FechaWhereUniqueInput
  }


  /**
   * Fecha updateMany
   */
  export type FechaUpdateManyArgs = {
    /**
     * The data used to update Fechas.
     * 
    **/
    data: XOR<FechaUpdateManyMutationInput, FechaUncheckedUpdateManyInput>
    /**
     * Filter which Fechas to update
     * 
    **/
    where?: FechaWhereInput
  }


  /**
   * Fecha upsert
   */
  export type FechaUpsertArgs = {
    /**
     * Select specific fields to fetch from the Fecha
     * 
    **/
    select?: FechaSelect | null
    /**
     * The filter to search for the Fecha to update in case it exists.
     * 
    **/
    where: FechaWhereUniqueInput
    /**
     * In case the Fecha found by the `where` argument doesn't exist, create a new Fecha with this data.
     * 
    **/
    create: XOR<FechaCreateInput, FechaUncheckedCreateInput>
    /**
     * In case the Fecha was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<FechaUpdateInput, FechaUncheckedUpdateInput>
  }


  /**
   * Fecha delete
   */
  export type FechaDeleteArgs = {
    /**
     * Select specific fields to fetch from the Fecha
     * 
    **/
    select?: FechaSelect | null
    /**
     * Filter which Fecha to delete.
     * 
    **/
    where: FechaWhereUniqueInput
  }


  /**
   * Fecha deleteMany
   */
  export type FechaDeleteManyArgs = {
    /**
     * Filter which Fechas to delete
     * 
    **/
    where?: FechaWhereInput
  }


  /**
   * Fecha without action
   */
  export type FechaArgs = {
    /**
     * Select specific fields to fetch from the Fecha
     * 
    **/
    select?: FechaSelect | null
  }



  /**
   * Model Mensaje
   */


  export type AggregateMensaje = {
    _count: MensajeCountAggregateOutputType | null
    _avg: MensajeAvgAggregateOutputType | null
    _sum: MensajeSumAggregateOutputType | null
    _min: MensajeMinAggregateOutputType | null
    _max: MensajeMaxAggregateOutputType | null
  }

  export type MensajeAvgAggregateOutputType = {
    id: number | null
  }

  export type MensajeSumAggregateOutputType = {
    id: number | null
  }

  export type MensajeMinAggregateOutputType = {
    id: number | null
    mensaje: string | null
    nombre: string | null
    mail: string | null
  }

  export type MensajeMaxAggregateOutputType = {
    id: number | null
    mensaje: string | null
    nombre: string | null
    mail: string | null
  }

  export type MensajeCountAggregateOutputType = {
    id: number
    mensaje: number
    nombre: number
    mail: number
    _all: number
  }


  export type MensajeAvgAggregateInputType = {
    id?: true
  }

  export type MensajeSumAggregateInputType = {
    id?: true
  }

  export type MensajeMinAggregateInputType = {
    id?: true
    mensaje?: true
    nombre?: true
    mail?: true
  }

  export type MensajeMaxAggregateInputType = {
    id?: true
    mensaje?: true
    nombre?: true
    mail?: true
  }

  export type MensajeCountAggregateInputType = {
    id?: true
    mensaje?: true
    nombre?: true
    mail?: true
    _all?: true
  }

  export type MensajeAggregateArgs = {
    /**
     * Filter which Mensaje to aggregate.
     * 
    **/
    where?: MensajeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mensajes to fetch.
     * 
    **/
    orderBy?: Enumerable<MensajeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: MensajeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mensajes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mensajes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Mensajes
    **/
    _count?: true | MensajeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MensajeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MensajeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MensajeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MensajeMaxAggregateInputType
  }

  export type GetMensajeAggregateType<T extends MensajeAggregateArgs> = {
        [P in keyof T & keyof AggregateMensaje]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMensaje[P]>
      : GetScalarType<T[P], AggregateMensaje[P]>
  }




  export type MensajeGroupByArgs = {
    where?: MensajeWhereInput
    orderBy?: Enumerable<MensajeOrderByWithAggregationInput>
    by: Array<MensajeScalarFieldEnum>
    having?: MensajeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MensajeCountAggregateInputType | true
    _avg?: MensajeAvgAggregateInputType
    _sum?: MensajeSumAggregateInputType
    _min?: MensajeMinAggregateInputType
    _max?: MensajeMaxAggregateInputType
  }


  export type MensajeGroupByOutputType = {
    id: number
    mensaje: string
    nombre: string
    mail: string
    _count: MensajeCountAggregateOutputType | null
    _avg: MensajeAvgAggregateOutputType | null
    _sum: MensajeSumAggregateOutputType | null
    _min: MensajeMinAggregateOutputType | null
    _max: MensajeMaxAggregateOutputType | null
  }

  type GetMensajeGroupByPayload<T extends MensajeGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MensajeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MensajeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MensajeGroupByOutputType[P]>
            : GetScalarType<T[P], MensajeGroupByOutputType[P]>
        }
      >
    >


  export type MensajeSelect = {
    id?: boolean
    mensaje?: boolean
    nombre?: boolean
    mail?: boolean
  }


  export type MensajeGetPayload<S extends boolean | null | undefined | MensajeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Mensaje :
    S extends undefined ? never :
    S extends { include: any } & (MensajeArgs | MensajeFindManyArgs)
    ? Mensaje 
    : S extends { select: any } & (MensajeArgs | MensajeFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Mensaje ? Mensaje[P] : never
  } 
      : Mensaje


  type MensajeCountArgs = Merge<
    Omit<MensajeFindManyArgs, 'select' | 'include'> & {
      select?: MensajeCountAggregateInputType | true
    }
  >

  export interface MensajeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Mensaje that matches the filter.
     * @param {MensajeFindUniqueArgs} args - Arguments to find a Mensaje
     * @example
     * // Get one Mensaje
     * const mensaje = await prisma.mensaje.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MensajeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MensajeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Mensaje'> extends True ? Prisma__MensajeClient<MensajeGetPayload<T>> : Prisma__MensajeClient<MensajeGetPayload<T> | null, null>

    /**
     * Find one Mensaje that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MensajeFindUniqueOrThrowArgs} args - Arguments to find a Mensaje
     * @example
     * // Get one Mensaje
     * const mensaje = await prisma.mensaje.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MensajeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MensajeFindUniqueOrThrowArgs>
    ): Prisma__MensajeClient<MensajeGetPayload<T>>

    /**
     * Find the first Mensaje that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensajeFindFirstArgs} args - Arguments to find a Mensaje
     * @example
     * // Get one Mensaje
     * const mensaje = await prisma.mensaje.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MensajeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MensajeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Mensaje'> extends True ? Prisma__MensajeClient<MensajeGetPayload<T>> : Prisma__MensajeClient<MensajeGetPayload<T> | null, null>

    /**
     * Find the first Mensaje that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensajeFindFirstOrThrowArgs} args - Arguments to find a Mensaje
     * @example
     * // Get one Mensaje
     * const mensaje = await prisma.mensaje.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MensajeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MensajeFindFirstOrThrowArgs>
    ): Prisma__MensajeClient<MensajeGetPayload<T>>

    /**
     * Find zero or more Mensajes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensajeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Mensajes
     * const mensajes = await prisma.mensaje.findMany()
     * 
     * // Get first 10 Mensajes
     * const mensajes = await prisma.mensaje.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mensajeWithIdOnly = await prisma.mensaje.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MensajeFindManyArgs>(
      args?: SelectSubset<T, MensajeFindManyArgs>
    ): PrismaPromise<Array<MensajeGetPayload<T>>>

    /**
     * Create a Mensaje.
     * @param {MensajeCreateArgs} args - Arguments to create a Mensaje.
     * @example
     * // Create one Mensaje
     * const Mensaje = await prisma.mensaje.create({
     *   data: {
     *     // ... data to create a Mensaje
     *   }
     * })
     * 
    **/
    create<T extends MensajeCreateArgs>(
      args: SelectSubset<T, MensajeCreateArgs>
    ): Prisma__MensajeClient<MensajeGetPayload<T>>

    /**
     * Create many Mensajes.
     *     @param {MensajeCreateManyArgs} args - Arguments to create many Mensajes.
     *     @example
     *     // Create many Mensajes
     *     const mensaje = await prisma.mensaje.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MensajeCreateManyArgs>(
      args?: SelectSubset<T, MensajeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Mensaje.
     * @param {MensajeDeleteArgs} args - Arguments to delete one Mensaje.
     * @example
     * // Delete one Mensaje
     * const Mensaje = await prisma.mensaje.delete({
     *   where: {
     *     // ... filter to delete one Mensaje
     *   }
     * })
     * 
    **/
    delete<T extends MensajeDeleteArgs>(
      args: SelectSubset<T, MensajeDeleteArgs>
    ): Prisma__MensajeClient<MensajeGetPayload<T>>

    /**
     * Update one Mensaje.
     * @param {MensajeUpdateArgs} args - Arguments to update one Mensaje.
     * @example
     * // Update one Mensaje
     * const mensaje = await prisma.mensaje.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MensajeUpdateArgs>(
      args: SelectSubset<T, MensajeUpdateArgs>
    ): Prisma__MensajeClient<MensajeGetPayload<T>>

    /**
     * Delete zero or more Mensajes.
     * @param {MensajeDeleteManyArgs} args - Arguments to filter Mensajes to delete.
     * @example
     * // Delete a few Mensajes
     * const { count } = await prisma.mensaje.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MensajeDeleteManyArgs>(
      args?: SelectSubset<T, MensajeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mensajes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensajeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Mensajes
     * const mensaje = await prisma.mensaje.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MensajeUpdateManyArgs>(
      args: SelectSubset<T, MensajeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Mensaje.
     * @param {MensajeUpsertArgs} args - Arguments to update or create a Mensaje.
     * @example
     * // Update or create a Mensaje
     * const mensaje = await prisma.mensaje.upsert({
     *   create: {
     *     // ... data to create a Mensaje
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mensaje we want to update
     *   }
     * })
    **/
    upsert<T extends MensajeUpsertArgs>(
      args: SelectSubset<T, MensajeUpsertArgs>
    ): Prisma__MensajeClient<MensajeGetPayload<T>>

    /**
     * Count the number of Mensajes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensajeCountArgs} args - Arguments to filter Mensajes to count.
     * @example
     * // Count the number of Mensajes
     * const count = await prisma.mensaje.count({
     *   where: {
     *     // ... the filter for the Mensajes we want to count
     *   }
     * })
    **/
    count<T extends MensajeCountArgs>(
      args?: Subset<T, MensajeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MensajeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mensaje.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensajeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MensajeAggregateArgs>(args: Subset<T, MensajeAggregateArgs>): PrismaPromise<GetMensajeAggregateType<T>>

    /**
     * Group by Mensaje.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensajeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MensajeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MensajeGroupByArgs['orderBy'] }
        : { orderBy?: MensajeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MensajeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMensajeGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Mensaje.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MensajeClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Mensaje base type for findUnique actions
   */
  export type MensajeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Mensaje
     * 
    **/
    select?: MensajeSelect | null
    /**
     * Filter, which Mensaje to fetch.
     * 
    **/
    where: MensajeWhereUniqueInput
  }

  /**
   * Mensaje findUnique
   */
  export interface MensajeFindUniqueArgs extends MensajeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Mensaje findUniqueOrThrow
   */
  export type MensajeFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Mensaje
     * 
    **/
    select?: MensajeSelect | null
    /**
     * Filter, which Mensaje to fetch.
     * 
    **/
    where: MensajeWhereUniqueInput
  }


  /**
   * Mensaje base type for findFirst actions
   */
  export type MensajeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Mensaje
     * 
    **/
    select?: MensajeSelect | null
    /**
     * Filter, which Mensaje to fetch.
     * 
    **/
    where?: MensajeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mensajes to fetch.
     * 
    **/
    orderBy?: Enumerable<MensajeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mensajes.
     * 
    **/
    cursor?: MensajeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mensajes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mensajes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mensajes.
     * 
    **/
    distinct?: Enumerable<MensajeScalarFieldEnum>
  }

  /**
   * Mensaje findFirst
   */
  export interface MensajeFindFirstArgs extends MensajeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Mensaje findFirstOrThrow
   */
  export type MensajeFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Mensaje
     * 
    **/
    select?: MensajeSelect | null
    /**
     * Filter, which Mensaje to fetch.
     * 
    **/
    where?: MensajeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mensajes to fetch.
     * 
    **/
    orderBy?: Enumerable<MensajeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mensajes.
     * 
    **/
    cursor?: MensajeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mensajes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mensajes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mensajes.
     * 
    **/
    distinct?: Enumerable<MensajeScalarFieldEnum>
  }


  /**
   * Mensaje findMany
   */
  export type MensajeFindManyArgs = {
    /**
     * Select specific fields to fetch from the Mensaje
     * 
    **/
    select?: MensajeSelect | null
    /**
     * Filter, which Mensajes to fetch.
     * 
    **/
    where?: MensajeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mensajes to fetch.
     * 
    **/
    orderBy?: Enumerable<MensajeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Mensajes.
     * 
    **/
    cursor?: MensajeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mensajes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mensajes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MensajeScalarFieldEnum>
  }


  /**
   * Mensaje create
   */
  export type MensajeCreateArgs = {
    /**
     * Select specific fields to fetch from the Mensaje
     * 
    **/
    select?: MensajeSelect | null
    /**
     * The data needed to create a Mensaje.
     * 
    **/
    data: XOR<MensajeCreateInput, MensajeUncheckedCreateInput>
  }


  /**
   * Mensaje createMany
   */
  export type MensajeCreateManyArgs = {
    /**
     * The data used to create many Mensajes.
     * 
    **/
    data: Enumerable<MensajeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Mensaje update
   */
  export type MensajeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Mensaje
     * 
    **/
    select?: MensajeSelect | null
    /**
     * The data needed to update a Mensaje.
     * 
    **/
    data: XOR<MensajeUpdateInput, MensajeUncheckedUpdateInput>
    /**
     * Choose, which Mensaje to update.
     * 
    **/
    where: MensajeWhereUniqueInput
  }


  /**
   * Mensaje updateMany
   */
  export type MensajeUpdateManyArgs = {
    /**
     * The data used to update Mensajes.
     * 
    **/
    data: XOR<MensajeUpdateManyMutationInput, MensajeUncheckedUpdateManyInput>
    /**
     * Filter which Mensajes to update
     * 
    **/
    where?: MensajeWhereInput
  }


  /**
   * Mensaje upsert
   */
  export type MensajeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Mensaje
     * 
    **/
    select?: MensajeSelect | null
    /**
     * The filter to search for the Mensaje to update in case it exists.
     * 
    **/
    where: MensajeWhereUniqueInput
    /**
     * In case the Mensaje found by the `where` argument doesn't exist, create a new Mensaje with this data.
     * 
    **/
    create: XOR<MensajeCreateInput, MensajeUncheckedCreateInput>
    /**
     * In case the Mensaje was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<MensajeUpdateInput, MensajeUncheckedUpdateInput>
  }


  /**
   * Mensaje delete
   */
  export type MensajeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Mensaje
     * 
    **/
    select?: MensajeSelect | null
    /**
     * Filter which Mensaje to delete.
     * 
    **/
    where: MensajeWhereUniqueInput
  }


  /**
   * Mensaje deleteMany
   */
  export type MensajeDeleteManyArgs = {
    /**
     * Filter which Mensajes to delete
     * 
    **/
    where?: MensajeWhereInput
  }


  /**
   * Mensaje without action
   */
  export type MensajeArgs = {
    /**
     * Select specific fields to fetch from the Mensaje
     * 
    **/
    select?: MensajeSelect | null
  }



  /**
   * Model Cancion
   */


  export type AggregateCancion = {
    _count: CancionCountAggregateOutputType | null
    _avg: CancionAvgAggregateOutputType | null
    _sum: CancionSumAggregateOutputType | null
    _min: CancionMinAggregateOutputType | null
    _max: CancionMaxAggregateOutputType | null
  }

  export type CancionAvgAggregateOutputType = {
    id: number | null
    anio: number | null
  }

  export type CancionSumAggregateOutputType = {
    id: number | null
    anio: number | null
  }

  export type CancionMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    imagen: string | null
    descripcion: string | null
    anio: number | null
    album: string | null
  }

  export type CancionMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    imagen: string | null
    descripcion: string | null
    anio: number | null
    album: string | null
  }

  export type CancionCountAggregateOutputType = {
    id: number
    nombre: number
    imagen: number
    descripcion: number
    anio: number
    album: number
    _all: number
  }


  export type CancionAvgAggregateInputType = {
    id?: true
    anio?: true
  }

  export type CancionSumAggregateInputType = {
    id?: true
    anio?: true
  }

  export type CancionMinAggregateInputType = {
    id?: true
    nombre?: true
    imagen?: true
    descripcion?: true
    anio?: true
    album?: true
  }

  export type CancionMaxAggregateInputType = {
    id?: true
    nombre?: true
    imagen?: true
    descripcion?: true
    anio?: true
    album?: true
  }

  export type CancionCountAggregateInputType = {
    id?: true
    nombre?: true
    imagen?: true
    descripcion?: true
    anio?: true
    album?: true
    _all?: true
  }

  export type CancionAggregateArgs = {
    /**
     * Filter which Cancion to aggregate.
     * 
    **/
    where?: CancionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cancions to fetch.
     * 
    **/
    orderBy?: Enumerable<CancionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CancionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cancions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cancions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cancions
    **/
    _count?: true | CancionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CancionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CancionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CancionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CancionMaxAggregateInputType
  }

  export type GetCancionAggregateType<T extends CancionAggregateArgs> = {
        [P in keyof T & keyof AggregateCancion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCancion[P]>
      : GetScalarType<T[P], AggregateCancion[P]>
  }




  export type CancionGroupByArgs = {
    where?: CancionWhereInput
    orderBy?: Enumerable<CancionOrderByWithAggregationInput>
    by: Array<CancionScalarFieldEnum>
    having?: CancionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CancionCountAggregateInputType | true
    _avg?: CancionAvgAggregateInputType
    _sum?: CancionSumAggregateInputType
    _min?: CancionMinAggregateInputType
    _max?: CancionMaxAggregateInputType
  }


  export type CancionGroupByOutputType = {
    id: number
    nombre: string
    imagen: string
    descripcion: string
    anio: number | null
    album: string | null
    _count: CancionCountAggregateOutputType | null
    _avg: CancionAvgAggregateOutputType | null
    _sum: CancionSumAggregateOutputType | null
    _min: CancionMinAggregateOutputType | null
    _max: CancionMaxAggregateOutputType | null
  }

  type GetCancionGroupByPayload<T extends CancionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CancionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CancionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CancionGroupByOutputType[P]>
            : GetScalarType<T[P], CancionGroupByOutputType[P]>
        }
      >
    >


  export type CancionSelect = {
    id?: boolean
    nombre?: boolean
    imagen?: boolean
    descripcion?: boolean
    anio?: boolean
    album?: boolean
  }


  export type CancionGetPayload<S extends boolean | null | undefined | CancionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Cancion :
    S extends undefined ? never :
    S extends { include: any } & (CancionArgs | CancionFindManyArgs)
    ? Cancion 
    : S extends { select: any } & (CancionArgs | CancionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Cancion ? Cancion[P] : never
  } 
      : Cancion


  type CancionCountArgs = Merge<
    Omit<CancionFindManyArgs, 'select' | 'include'> & {
      select?: CancionCountAggregateInputType | true
    }
  >

  export interface CancionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Cancion that matches the filter.
     * @param {CancionFindUniqueArgs} args - Arguments to find a Cancion
     * @example
     * // Get one Cancion
     * const cancion = await prisma.cancion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CancionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CancionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Cancion'> extends True ? Prisma__CancionClient<CancionGetPayload<T>> : Prisma__CancionClient<CancionGetPayload<T> | null, null>

    /**
     * Find one Cancion that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CancionFindUniqueOrThrowArgs} args - Arguments to find a Cancion
     * @example
     * // Get one Cancion
     * const cancion = await prisma.cancion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CancionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CancionFindUniqueOrThrowArgs>
    ): Prisma__CancionClient<CancionGetPayload<T>>

    /**
     * Find the first Cancion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CancionFindFirstArgs} args - Arguments to find a Cancion
     * @example
     * // Get one Cancion
     * const cancion = await prisma.cancion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CancionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CancionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Cancion'> extends True ? Prisma__CancionClient<CancionGetPayload<T>> : Prisma__CancionClient<CancionGetPayload<T> | null, null>

    /**
     * Find the first Cancion that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CancionFindFirstOrThrowArgs} args - Arguments to find a Cancion
     * @example
     * // Get one Cancion
     * const cancion = await prisma.cancion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CancionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CancionFindFirstOrThrowArgs>
    ): Prisma__CancionClient<CancionGetPayload<T>>

    /**
     * Find zero or more Cancions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CancionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cancions
     * const cancions = await prisma.cancion.findMany()
     * 
     * // Get first 10 Cancions
     * const cancions = await prisma.cancion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cancionWithIdOnly = await prisma.cancion.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CancionFindManyArgs>(
      args?: SelectSubset<T, CancionFindManyArgs>
    ): PrismaPromise<Array<CancionGetPayload<T>>>

    /**
     * Create a Cancion.
     * @param {CancionCreateArgs} args - Arguments to create a Cancion.
     * @example
     * // Create one Cancion
     * const Cancion = await prisma.cancion.create({
     *   data: {
     *     // ... data to create a Cancion
     *   }
     * })
     * 
    **/
    create<T extends CancionCreateArgs>(
      args: SelectSubset<T, CancionCreateArgs>
    ): Prisma__CancionClient<CancionGetPayload<T>>

    /**
     * Create many Cancions.
     *     @param {CancionCreateManyArgs} args - Arguments to create many Cancions.
     *     @example
     *     // Create many Cancions
     *     const cancion = await prisma.cancion.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CancionCreateManyArgs>(
      args?: SelectSubset<T, CancionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Cancion.
     * @param {CancionDeleteArgs} args - Arguments to delete one Cancion.
     * @example
     * // Delete one Cancion
     * const Cancion = await prisma.cancion.delete({
     *   where: {
     *     // ... filter to delete one Cancion
     *   }
     * })
     * 
    **/
    delete<T extends CancionDeleteArgs>(
      args: SelectSubset<T, CancionDeleteArgs>
    ): Prisma__CancionClient<CancionGetPayload<T>>

    /**
     * Update one Cancion.
     * @param {CancionUpdateArgs} args - Arguments to update one Cancion.
     * @example
     * // Update one Cancion
     * const cancion = await prisma.cancion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CancionUpdateArgs>(
      args: SelectSubset<T, CancionUpdateArgs>
    ): Prisma__CancionClient<CancionGetPayload<T>>

    /**
     * Delete zero or more Cancions.
     * @param {CancionDeleteManyArgs} args - Arguments to filter Cancions to delete.
     * @example
     * // Delete a few Cancions
     * const { count } = await prisma.cancion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CancionDeleteManyArgs>(
      args?: SelectSubset<T, CancionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cancions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CancionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cancions
     * const cancion = await prisma.cancion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CancionUpdateManyArgs>(
      args: SelectSubset<T, CancionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Cancion.
     * @param {CancionUpsertArgs} args - Arguments to update or create a Cancion.
     * @example
     * // Update or create a Cancion
     * const cancion = await prisma.cancion.upsert({
     *   create: {
     *     // ... data to create a Cancion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cancion we want to update
     *   }
     * })
    **/
    upsert<T extends CancionUpsertArgs>(
      args: SelectSubset<T, CancionUpsertArgs>
    ): Prisma__CancionClient<CancionGetPayload<T>>

    /**
     * Count the number of Cancions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CancionCountArgs} args - Arguments to filter Cancions to count.
     * @example
     * // Count the number of Cancions
     * const count = await prisma.cancion.count({
     *   where: {
     *     // ... the filter for the Cancions we want to count
     *   }
     * })
    **/
    count<T extends CancionCountArgs>(
      args?: Subset<T, CancionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CancionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cancion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CancionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CancionAggregateArgs>(args: Subset<T, CancionAggregateArgs>): PrismaPromise<GetCancionAggregateType<T>>

    /**
     * Group by Cancion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CancionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CancionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CancionGroupByArgs['orderBy'] }
        : { orderBy?: CancionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CancionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCancionGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Cancion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CancionClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Cancion base type for findUnique actions
   */
  export type CancionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Cancion
     * 
    **/
    select?: CancionSelect | null
    /**
     * Filter, which Cancion to fetch.
     * 
    **/
    where: CancionWhereUniqueInput
  }

  /**
   * Cancion findUnique
   */
  export interface CancionFindUniqueArgs extends CancionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Cancion findUniqueOrThrow
   */
  export type CancionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Cancion
     * 
    **/
    select?: CancionSelect | null
    /**
     * Filter, which Cancion to fetch.
     * 
    **/
    where: CancionWhereUniqueInput
  }


  /**
   * Cancion base type for findFirst actions
   */
  export type CancionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Cancion
     * 
    **/
    select?: CancionSelect | null
    /**
     * Filter, which Cancion to fetch.
     * 
    **/
    where?: CancionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cancions to fetch.
     * 
    **/
    orderBy?: Enumerable<CancionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cancions.
     * 
    **/
    cursor?: CancionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cancions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cancions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cancions.
     * 
    **/
    distinct?: Enumerable<CancionScalarFieldEnum>
  }

  /**
   * Cancion findFirst
   */
  export interface CancionFindFirstArgs extends CancionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Cancion findFirstOrThrow
   */
  export type CancionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Cancion
     * 
    **/
    select?: CancionSelect | null
    /**
     * Filter, which Cancion to fetch.
     * 
    **/
    where?: CancionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cancions to fetch.
     * 
    **/
    orderBy?: Enumerable<CancionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cancions.
     * 
    **/
    cursor?: CancionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cancions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cancions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cancions.
     * 
    **/
    distinct?: Enumerable<CancionScalarFieldEnum>
  }


  /**
   * Cancion findMany
   */
  export type CancionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Cancion
     * 
    **/
    select?: CancionSelect | null
    /**
     * Filter, which Cancions to fetch.
     * 
    **/
    where?: CancionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cancions to fetch.
     * 
    **/
    orderBy?: Enumerable<CancionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cancions.
     * 
    **/
    cursor?: CancionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cancions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cancions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CancionScalarFieldEnum>
  }


  /**
   * Cancion create
   */
  export type CancionCreateArgs = {
    /**
     * Select specific fields to fetch from the Cancion
     * 
    **/
    select?: CancionSelect | null
    /**
     * The data needed to create a Cancion.
     * 
    **/
    data: XOR<CancionCreateInput, CancionUncheckedCreateInput>
  }


  /**
   * Cancion createMany
   */
  export type CancionCreateManyArgs = {
    /**
     * The data used to create many Cancions.
     * 
    **/
    data: Enumerable<CancionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Cancion update
   */
  export type CancionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Cancion
     * 
    **/
    select?: CancionSelect | null
    /**
     * The data needed to update a Cancion.
     * 
    **/
    data: XOR<CancionUpdateInput, CancionUncheckedUpdateInput>
    /**
     * Choose, which Cancion to update.
     * 
    **/
    where: CancionWhereUniqueInput
  }


  /**
   * Cancion updateMany
   */
  export type CancionUpdateManyArgs = {
    /**
     * The data used to update Cancions.
     * 
    **/
    data: XOR<CancionUpdateManyMutationInput, CancionUncheckedUpdateManyInput>
    /**
     * Filter which Cancions to update
     * 
    **/
    where?: CancionWhereInput
  }


  /**
   * Cancion upsert
   */
  export type CancionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Cancion
     * 
    **/
    select?: CancionSelect | null
    /**
     * The filter to search for the Cancion to update in case it exists.
     * 
    **/
    where: CancionWhereUniqueInput
    /**
     * In case the Cancion found by the `where` argument doesn't exist, create a new Cancion with this data.
     * 
    **/
    create: XOR<CancionCreateInput, CancionUncheckedCreateInput>
    /**
     * In case the Cancion was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CancionUpdateInput, CancionUncheckedUpdateInput>
  }


  /**
   * Cancion delete
   */
  export type CancionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Cancion
     * 
    **/
    select?: CancionSelect | null
    /**
     * Filter which Cancion to delete.
     * 
    **/
    where: CancionWhereUniqueInput
  }


  /**
   * Cancion deleteMany
   */
  export type CancionDeleteManyArgs = {
    /**
     * Filter which Cancions to delete
     * 
    **/
    where?: CancionWhereInput
  }


  /**
   * Cancion without action
   */
  export type CancionArgs = {
    /**
     * Select specific fields to fetch from the Cancion
     * 
    **/
    select?: CancionSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CancionScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    imagen: 'imagen',
    descripcion: 'descripcion',
    anio: 'anio',
    album: 'album'
  };

  export type CancionScalarFieldEnum = (typeof CancionScalarFieldEnum)[keyof typeof CancionScalarFieldEnum]


  export const FechaScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    lugar: 'lugar',
    numero: 'numero',
    localidad: 'localidad',
    codigoPostal: 'codigoPostal',
    pais: 'pais',
    fecha: 'fecha',
    imagen: 'imagen',
    hora: 'hora',
    entrada: 'entrada'
  };

  export type FechaScalarFieldEnum = (typeof FechaScalarFieldEnum)[keyof typeof FechaScalarFieldEnum]


  export const MensajeScalarFieldEnum: {
    id: 'id',
    mensaje: 'mensaje',
    nombre: 'nombre',
    mail: 'mail'
  };

  export type MensajeScalarFieldEnum = (typeof MensajeScalarFieldEnum)[keyof typeof MensajeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type FechaWhereInput = {
    AND?: Enumerable<FechaWhereInput>
    OR?: Enumerable<FechaWhereInput>
    NOT?: Enumerable<FechaWhereInput>
    id?: IntFilter | number
    nombre?: StringFilter | string
    lugar?: StringFilter | string
    numero?: IntNullableFilter | number | null
    localidad?: StringNullableFilter | string | null
    codigoPostal?: StringNullableFilter | string | null
    pais?: StringNullableFilter | string | null
    fecha?: StringFilter | string
    imagen?: StringNullableFilter | string | null
    hora?: StringNullableFilter | string | null
    entrada?: StringNullableFilter | string | null
  }

  export type FechaOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    lugar?: SortOrder
    numero?: SortOrder
    localidad?: SortOrder
    codigoPostal?: SortOrder
    pais?: SortOrder
    fecha?: SortOrder
    imagen?: SortOrder
    hora?: SortOrder
    entrada?: SortOrder
  }

  export type FechaWhereUniqueInput = {
    id?: number
  }

  export type FechaOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    lugar?: SortOrder
    numero?: SortOrder
    localidad?: SortOrder
    codigoPostal?: SortOrder
    pais?: SortOrder
    fecha?: SortOrder
    imagen?: SortOrder
    hora?: SortOrder
    entrada?: SortOrder
    _count?: FechaCountOrderByAggregateInput
    _avg?: FechaAvgOrderByAggregateInput
    _max?: FechaMaxOrderByAggregateInput
    _min?: FechaMinOrderByAggregateInput
    _sum?: FechaSumOrderByAggregateInput
  }

  export type FechaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FechaScalarWhereWithAggregatesInput>
    OR?: Enumerable<FechaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FechaScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nombre?: StringWithAggregatesFilter | string
    lugar?: StringWithAggregatesFilter | string
    numero?: IntNullableWithAggregatesFilter | number | null
    localidad?: StringNullableWithAggregatesFilter | string | null
    codigoPostal?: StringNullableWithAggregatesFilter | string | null
    pais?: StringNullableWithAggregatesFilter | string | null
    fecha?: StringWithAggregatesFilter | string
    imagen?: StringNullableWithAggregatesFilter | string | null
    hora?: StringNullableWithAggregatesFilter | string | null
    entrada?: StringNullableWithAggregatesFilter | string | null
  }

  export type MensajeWhereInput = {
    AND?: Enumerable<MensajeWhereInput>
    OR?: Enumerable<MensajeWhereInput>
    NOT?: Enumerable<MensajeWhereInput>
    id?: IntFilter | number
    mensaje?: StringFilter | string
    nombre?: StringFilter | string
    mail?: StringFilter | string
  }

  export type MensajeOrderByWithRelationInput = {
    id?: SortOrder
    mensaje?: SortOrder
    nombre?: SortOrder
    mail?: SortOrder
  }

  export type MensajeWhereUniqueInput = {
    id?: number
  }

  export type MensajeOrderByWithAggregationInput = {
    id?: SortOrder
    mensaje?: SortOrder
    nombre?: SortOrder
    mail?: SortOrder
    _count?: MensajeCountOrderByAggregateInput
    _avg?: MensajeAvgOrderByAggregateInput
    _max?: MensajeMaxOrderByAggregateInput
    _min?: MensajeMinOrderByAggregateInput
    _sum?: MensajeSumOrderByAggregateInput
  }

  export type MensajeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MensajeScalarWhereWithAggregatesInput>
    OR?: Enumerable<MensajeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MensajeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    mensaje?: StringWithAggregatesFilter | string
    nombre?: StringWithAggregatesFilter | string
    mail?: StringWithAggregatesFilter | string
  }

  export type CancionWhereInput = {
    AND?: Enumerable<CancionWhereInput>
    OR?: Enumerable<CancionWhereInput>
    NOT?: Enumerable<CancionWhereInput>
    id?: IntFilter | number
    nombre?: StringFilter | string
    imagen?: StringFilter | string
    descripcion?: StringFilter | string
    anio?: IntNullableFilter | number | null
    album?: StringNullableFilter | string | null
  }

  export type CancionOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    imagen?: SortOrder
    descripcion?: SortOrder
    anio?: SortOrder
    album?: SortOrder
  }

  export type CancionWhereUniqueInput = {
    id?: number
  }

  export type CancionOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    imagen?: SortOrder
    descripcion?: SortOrder
    anio?: SortOrder
    album?: SortOrder
    _count?: CancionCountOrderByAggregateInput
    _avg?: CancionAvgOrderByAggregateInput
    _max?: CancionMaxOrderByAggregateInput
    _min?: CancionMinOrderByAggregateInput
    _sum?: CancionSumOrderByAggregateInput
  }

  export type CancionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CancionScalarWhereWithAggregatesInput>
    OR?: Enumerable<CancionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CancionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nombre?: StringWithAggregatesFilter | string
    imagen?: StringWithAggregatesFilter | string
    descripcion?: StringWithAggregatesFilter | string
    anio?: IntNullableWithAggregatesFilter | number | null
    album?: StringNullableWithAggregatesFilter | string | null
  }

  export type FechaCreateInput = {
    nombre: string
    lugar: string
    numero?: number | null
    localidad?: string | null
    codigoPostal?: string | null
    pais?: string | null
    fecha: string
    imagen?: string | null
    hora?: string | null
    entrada?: string | null
  }

  export type FechaUncheckedCreateInput = {
    id?: number
    nombre: string
    lugar: string
    numero?: number | null
    localidad?: string | null
    codigoPostal?: string | null
    pais?: string | null
    fecha: string
    imagen?: string | null
    hora?: string | null
    entrada?: string | null
  }

  export type FechaUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    lugar?: StringFieldUpdateOperationsInput | string
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    localidad?: NullableStringFieldUpdateOperationsInput | string | null
    codigoPostal?: NullableStringFieldUpdateOperationsInput | string | null
    pais?: NullableStringFieldUpdateOperationsInput | string | null
    fecha?: StringFieldUpdateOperationsInput | string
    imagen?: NullableStringFieldUpdateOperationsInput | string | null
    hora?: NullableStringFieldUpdateOperationsInput | string | null
    entrada?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FechaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    lugar?: StringFieldUpdateOperationsInput | string
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    localidad?: NullableStringFieldUpdateOperationsInput | string | null
    codigoPostal?: NullableStringFieldUpdateOperationsInput | string | null
    pais?: NullableStringFieldUpdateOperationsInput | string | null
    fecha?: StringFieldUpdateOperationsInput | string
    imagen?: NullableStringFieldUpdateOperationsInput | string | null
    hora?: NullableStringFieldUpdateOperationsInput | string | null
    entrada?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FechaCreateManyInput = {
    id?: number
    nombre: string
    lugar: string
    numero?: number | null
    localidad?: string | null
    codigoPostal?: string | null
    pais?: string | null
    fecha: string
    imagen?: string | null
    hora?: string | null
    entrada?: string | null
  }

  export type FechaUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    lugar?: StringFieldUpdateOperationsInput | string
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    localidad?: NullableStringFieldUpdateOperationsInput | string | null
    codigoPostal?: NullableStringFieldUpdateOperationsInput | string | null
    pais?: NullableStringFieldUpdateOperationsInput | string | null
    fecha?: StringFieldUpdateOperationsInput | string
    imagen?: NullableStringFieldUpdateOperationsInput | string | null
    hora?: NullableStringFieldUpdateOperationsInput | string | null
    entrada?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FechaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    lugar?: StringFieldUpdateOperationsInput | string
    numero?: NullableIntFieldUpdateOperationsInput | number | null
    localidad?: NullableStringFieldUpdateOperationsInput | string | null
    codigoPostal?: NullableStringFieldUpdateOperationsInput | string | null
    pais?: NullableStringFieldUpdateOperationsInput | string | null
    fecha?: StringFieldUpdateOperationsInput | string
    imagen?: NullableStringFieldUpdateOperationsInput | string | null
    hora?: NullableStringFieldUpdateOperationsInput | string | null
    entrada?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MensajeCreateInput = {
    mensaje: string
    nombre: string
    mail: string
  }

  export type MensajeUncheckedCreateInput = {
    id?: number
    mensaje: string
    nombre: string
    mail: string
  }

  export type MensajeUpdateInput = {
    mensaje?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
  }

  export type MensajeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    mensaje?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
  }

  export type MensajeCreateManyInput = {
    id?: number
    mensaje: string
    nombre: string
    mail: string
  }

  export type MensajeUpdateManyMutationInput = {
    mensaje?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
  }

  export type MensajeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    mensaje?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
  }

  export type CancionCreateInput = {
    nombre: string
    imagen: string
    descripcion: string
    anio?: number | null
    album?: string | null
  }

  export type CancionUncheckedCreateInput = {
    id?: number
    nombre: string
    imagen: string
    descripcion: string
    anio?: number | null
    album?: string | null
  }

  export type CancionUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    anio?: NullableIntFieldUpdateOperationsInput | number | null
    album?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CancionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    anio?: NullableIntFieldUpdateOperationsInput | number | null
    album?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CancionCreateManyInput = {
    id?: number
    nombre: string
    imagen: string
    descripcion: string
    anio?: number | null
    album?: string | null
  }

  export type CancionUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    anio?: NullableIntFieldUpdateOperationsInput | number | null
    album?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CancionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    anio?: NullableIntFieldUpdateOperationsInput | number | null
    album?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type FechaCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    lugar?: SortOrder
    numero?: SortOrder
    localidad?: SortOrder
    codigoPostal?: SortOrder
    pais?: SortOrder
    fecha?: SortOrder
    imagen?: SortOrder
    hora?: SortOrder
    entrada?: SortOrder
  }

  export type FechaAvgOrderByAggregateInput = {
    id?: SortOrder
    numero?: SortOrder
  }

  export type FechaMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    lugar?: SortOrder
    numero?: SortOrder
    localidad?: SortOrder
    codigoPostal?: SortOrder
    pais?: SortOrder
    fecha?: SortOrder
    imagen?: SortOrder
    hora?: SortOrder
    entrada?: SortOrder
  }

  export type FechaMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    lugar?: SortOrder
    numero?: SortOrder
    localidad?: SortOrder
    codigoPostal?: SortOrder
    pais?: SortOrder
    fecha?: SortOrder
    imagen?: SortOrder
    hora?: SortOrder
    entrada?: SortOrder
  }

  export type FechaSumOrderByAggregateInput = {
    id?: SortOrder
    numero?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type MensajeCountOrderByAggregateInput = {
    id?: SortOrder
    mensaje?: SortOrder
    nombre?: SortOrder
    mail?: SortOrder
  }

  export type MensajeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MensajeMaxOrderByAggregateInput = {
    id?: SortOrder
    mensaje?: SortOrder
    nombre?: SortOrder
    mail?: SortOrder
  }

  export type MensajeMinOrderByAggregateInput = {
    id?: SortOrder
    mensaje?: SortOrder
    nombre?: SortOrder
    mail?: SortOrder
  }

  export type MensajeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CancionCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    imagen?: SortOrder
    descripcion?: SortOrder
    anio?: SortOrder
    album?: SortOrder
  }

  export type CancionAvgOrderByAggregateInput = {
    id?: SortOrder
    anio?: SortOrder
  }

  export type CancionMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    imagen?: SortOrder
    descripcion?: SortOrder
    anio?: SortOrder
    album?: SortOrder
  }

  export type CancionMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    imagen?: SortOrder
    descripcion?: SortOrder
    anio?: SortOrder
    album?: SortOrder
  }

  export type CancionSumOrderByAggregateInput = {
    id?: SortOrder
    anio?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}